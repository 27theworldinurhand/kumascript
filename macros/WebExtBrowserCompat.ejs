<%

/*
WebExtBrowserCompat.ejs
-----------------------
Use this macro to insert the appropriate WebExtension compat table for the
current page.

It transforms the URL of the current page into a path through the compat
data, and uses this path to retrieve the appropriate bit of data.
For example:

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/alarms
...would become data["alarms"]

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/alarms/get
...would become data["alarms"]["get"]

One tricky detail is that it needs to handle the devtools APIs, which name
themselves "devtools.thing":

https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/devtools.panels
...would become data["devtools"]["panels"]

It then passes the compat data into "WebExtBrowserCompatTable", which
builds the table.

This macro may only be called from pages under "Add-ons/WebExtensions/API/".
It takes no arguments.
*/

const url = "https://raw.githubusercontent.com/mdn/browser-compat-data/master/webextensions/javascript-apis.json";
const webExtAPIBaseUrl = "Add-ons/WebExtensions/API/";

// Pages that include this macro must be under
// the "Add-ons/WebExtensions/API/" hierarchy.
// So first, let's get the part of the URL following that subpath, or fail.
var components = env.slug.split(webExtAPIBaseUrl);
if (components.length < 2) {
  throw "This macro can only be called from pages under \"Add-ons/WebExtensions/API/\"";
}
  
// Now we're looking at a subpath like:
// "Alarms" or "Alarms/clear" or "storage/StorageArea/get"
// or even "devtools.panels/ExtensionPanel"
// So split this subpath on either "/" or ".":
pathPieces = components[1].split(/[\.//]/);

// Now we can use pathPieces to walk through the compat data
var compatJson = mdn.fetchJSONResource(url).data.webextensions.api;  
for (piece of pathPieces) {
  compatJson = compatJson[piece];
}

var output = template("WebExtBrowserCompatTable", [compatJson, env.slug]);

%>
<%-output%>
